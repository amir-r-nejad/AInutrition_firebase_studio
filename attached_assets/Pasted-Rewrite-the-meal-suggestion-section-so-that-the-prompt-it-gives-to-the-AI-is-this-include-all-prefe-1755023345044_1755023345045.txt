Rewrite the meal suggestion section so that the prompt it gives to the AI is this: include all preferences that exist on the meal suggestion page, and also what it requests is one dish for the meal that the user selects, and suggest one dish that includes all the ingredients of that dish according to the preferences, and that the ingredients include sources of protein, carbohydrates, and fat, and also return the nutrition which includes gr (grams), calorie, carb, protein, fat of those ingredients. Then take the request you got from the AI into this code that I'm sending to adjust the nutrition and correct its numbers. This code that I sent is a sample; it should use the macro data that it gets from the macro splitter as its source and adjust fat, carb, calorie, protein until it reaches that ideal with the linear optimization method that I put in the code I'm sending you.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Macro Optimization</title>
  <script src="https://cdn.jsdelivr.net/npm/javascript-lp-solver@0.4.24/solver.js"></script>
</head>
<body>
  <h1>Macro Optimization Results</h1>
  <pre id="output"></pre>
  <script type="text/typescript">
    // Define interfaces for type safety
    interface Ingredient {
      name: string;
      cal: number;  // Calories per gram
      prot: number; // Protein per gram
      carb: number; // Carbs per gram
      fat: number;  // Fat per gram
    }

    interface Targets {
      calories: number;
      protein: number;
      carbs: number;
      fat: number;
    }

    // Sample data
    const targets: Targets = {
      calories: 2000,
      protein: 150,
      carbs: 200,
      fat: 70
    };

    const ingredients: Ingredient[] = [
      { name: 'Chicken', cal: 2.39, prot: 0.27, carb: 0, fat: 0.14 },
      { name: 'Rice', cal: 1.3, prot: 0.027, carb: 0.28, fat: 0.003 },
      { name: 'Broccoli', cal: 0.34, prot: 0.028, carb: 0.066, fat: 0.004 },
      { name: 'Olive Oil', cal: 8.84, prot: 0, carb: 0, fat: 1 }
    ];

    // Set up the linear programming model
    const model: any = {
      optimize: 'totalDev',
      opType: 'min',
      constraints: {
        calories: { equal: targets.calories },
        protein: { equal: targets.protein },
        carbs: { equal: targets.carbs },
        fat: { equal: targets.fat }
        // Uncomment to add ranges, e.g.:
        // calories: { min: 1900, max: 2100 },
      },
      variables: {},
      ints: {}, // If you want integer amounts, add variables here
    };

    // Add deviation variables and ingredient contributions
    ingredients.forEach(ing => {
      model.variables[ing.name] = {
        calories: ing.cal,
        protein: ing.prot,
        carbs: ing.carb,
        fat: ing.fat
      };
    });

    // Deviation variables (positive and negative for each macro)
    ['calories', 'protein', 'carbs', 'fat'].forEach(macro => {
      const posDev = `${macro}_pos`;
      const negDev = `${macro}_neg`;
      model.variables[posDev] = { [macro]: 1, totalDev: 1 };
      model.variables[negDev] = { [macro]: -1, totalDev: 1 };
      model.constraints[posDev] = { min: 0 };
      model.constraints[negDev] = { min: 0 };
    });

    // Solve the model using javascript-lp-solver
    const results = (window as any).solver.Solve(model);

    // Calculate achieved macros
    const achieved = {
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0
    };

    ingredients.forEach(ing => {
      const amount = results[ing.name] || 0;
      achieved.calories += amount * ing.cal;
      achieved.protein += amount * ing.prot;
      achieved.carbs += amount * ing.carb;
      achieved.fat += amount * ing.fat;
    });

    // Output results
    let output = `Status: ${results.feasible ? 'Optimal' : 'Infeasible'}\n`;
    output += `Total Deviation: ${results.result.toFixed(2)}\n`;
    output += 'Amounts:\n';
    ingredients.forEach(ing => {
      output += `${ing.name}: ${(results[ing.name] || 0).toFixed(2)} g\n`;
    });
    output += '\nAchieved Macros:\n';
    output += `Calories: ${achieved.calories.toFixed(2)}\n`;
    output += `Protein: ${achieved.protein.toFixed(2)}\n`;
    output += `Carbs: ${achieved.carbs.toFixed(2)}\n`;
    output += `Fat: ${achieved.fat.toFixed(2)}\n`;

    // Display in browser
    document.getElementById('output')!.innerText = output;

    // Log to console for debugging
    console.log(output);
  </script>
</body>
</html>